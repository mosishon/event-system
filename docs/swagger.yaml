basePath: /api
definitions:
  models.ErrorResponse:
    properties:
      details:
        type: string
      message:
        type: string
    type: object
  models.EventRequest:
    properties:
      capacity:
        type: integer
      description:
        type: string
      end_time:
        type: string
      location:
        type: string
      name:
        type: string
      start_time:
        type: string
    required:
    - capacity
    - end_time
    - name
    - start_time
    type: object
  models.EventResponse:
    properties:
      capacity:
        type: integer
      created_at:
        type: string
      description:
        type: string
      end_time:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      organizer_id:
        type: integer
      start_time:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.EventWithParticipantsResponse:
    properties:
      event:
        $ref: '#/definitions/models.EventResponse'
      participants:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.MessageResponse:
    properties:
      message:
        type: string
    type: object
  models.ParticipantCountResponse:
    properties:
      count:
        type: integer
    type: object
  models.ParticipantStatusResponse:
    properties:
      is_participant:
        type: boolean
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.TokenResponse:
    properties:
      expires_at:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@event-system.com
    name: API Support
  description: This is an event management system API with JWT authentication
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Event Management System API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user with email and password
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login a user
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the current user's profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email, and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /events:
    post:
      consumes:
      - application/json
      description: Create a new event with name, description, location, start time,
        end time, and capacity
      parameters:
      - description: Event creation data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.EventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new event
      tags:
      - events
  /events/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an event
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get an event
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an event with name, description, location, start time, end
        time, and capacity
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      - description: Event update data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/models.EventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an event
      tags:
      - events
  /events/{id}/close:
    post:
      consumes:
      - application/json
      description: Close an event by ID
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventResponse'
      security:
      - BearerAuth: []
      summary: Close an event
      tags:
      - events
  /events/{id}/is-participant:
    get:
      consumes:
      - application/json
      description: Check if the current user is a participant of an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParticipantStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check if user is a participant
      tags:
      - participants
  /events/{id}/join:
    post:
      consumes:
      - application/json
      description: Join an event as a participant
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Join an event
      tags:
      - participants
  /events/{id}/leave:
    post:
      consumes:
      - application/json
      description: Leave an event as a participant
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Leave an event
      tags:
      - participants
  /events/{id}/participant-count:
    get:
      consumes:
      - application/json
      description: Get the number of participants for an event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ParticipantCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get participant count
      tags:
      - participants
  /events/{id}/participants:
    get:
      consumes:
      - application/json
      description: Get an event with its participants
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EventWithParticipantsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get event with participants
      tags:
      - events
  /events/my/:
    get:
      consumes:
      - application/json
      description: Get all events created by the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my events
      tags:
      - events
  /events/participating:
    get:
      consumes:
      - application/json
      description: Get all events the current user is participating in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my participating events
      tags:
      - events
  /events/public:
    get:
      consumes:
      - application/json
      description: Get all public events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EventResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all public events
      tags:
      - events
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
